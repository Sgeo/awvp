/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]
pub type event_t = i32;
pub const EVENT_CHAT: event_t = 0;
pub const EVENT_AVATAR_ADD: event_t = 1;
pub const EVENT_AVATAR_CHANGE: event_t = 2;
pub const EVENT_AVATAR_DELETE: event_t = 3;
pub const EVENT_OBJECT: event_t = 4;
pub const EVENT_OBJECT_CHANGE: event_t = 5;
pub const EVENT_OBJECT_DELETE: event_t = 6;
pub const EVENT_OBJECT_CLICK: event_t = 7;
pub const EVENT_WORLD_LIST: event_t = 8;
pub const EVENT_WORLD_SETTING: event_t = 9;
pub const EVENT_WORLD_SETTINGS_CHANGED: event_t = 10;
pub const EVENT_FRIEND: event_t = 11;
pub const EVENT_WORLD_DISCONNECT: event_t = 12;
pub const EVENT_UNIVERSE_DISCONNECT: event_t = 13;
pub const EVENT_USER_ATTRIBUTES: event_t = 14;
pub const EVENT_CELL_END: event_t = 15;
pub const EVENT_TERRAIN_NODE: event_t = 16;
pub const EVENT_AVATAR_CLICK: event_t = 17;
pub const EVENT_TELEPORT: event_t = 18;
pub const EVENT_URL: event_t = 19;
pub const EVENT_OBJECT_BUMP_BEGIN: event_t = 20;
pub const EVENT_OBJECT_BUMP_END: event_t = 21;
pub const EVENT_TERRAIN_NODE_CHANGED: event_t = 22;
pub const EVENT_JOIN: event_t = 23;
pub const HIGHEST_EVENT: event_t = 24;
pub type callback_t = i32;
pub const CALLBACK_OBJECT_ADD: callback_t = 0;
pub const CALLBACK_OBJECT_CHANGE: callback_t = 1;
pub const CALLBACK_OBJECT_DELETE: callback_t = 2;
pub const CALLBACK_GET_FRIENDS: callback_t = 3;
pub const CALLBACK_FRIEND_ADD: callback_t = 4;
pub const CALLBACK_FRIEND_DELETE: callback_t = 5;
pub const CALLBACK_TERRAIN_QUERY: callback_t = 6;
pub const CALLBACK_TERRAIN_NODE_SET: callback_t = 7;
pub const CALLBACK_OBJECT_GET: callback_t = 8;
pub const CALLBACK_OBJECT_LOAD: callback_t = 9;
pub const CALLBACK_LOGIN: callback_t = 10;
pub const CALLBACK_ENTER: callback_t = 11;
pub const CALLBACK_JOIN: callback_t = 12;
pub const CALLBACK_CONNECT_UNIVERSE: callback_t = 13;
pub const CALLBACK_WORLD_PERMISSION_USER_SET: callback_t = 14;
pub const CALLBACK_WORLD_PERMISSION_SESSION_SET: callback_t = 15;
pub const CALLBACK_WORLD_SETTING_SET: callback_t = 16;
pub const HIGHEST_CALLBACK: callback_t = 17;
pub type int_attribute_t = i32;
pub const AVATAR_SESSION: int_attribute_t = 0;
pub const AVATAR_TYPE: int_attribute_t = 1;
pub const MY_TYPE: int_attribute_t = 2;
pub const OBJECT_ID: int_attribute_t = 3;
pub const OBJECT_TYPE: int_attribute_t = 4;
pub const OBJECT_TIME: int_attribute_t = 5;
pub const OBJECT_USER_ID: int_attribute_t = 6;
pub const WORLD_STATE: int_attribute_t = 7;
pub const WORLD_USERS: int_attribute_t = 8;
pub const REFERENCE_NUMBER: int_attribute_t = 9;
pub const CALLBACK: int_attribute_t = 10;
pub const USER_ID: int_attribute_t = 11;
pub const USER_REGISTRATION_TIME: int_attribute_t = 12;
pub const USER_ONLINE_TIME: int_attribute_t = 13;
pub const USER_LAST_LOGIN: int_attribute_t = 14;
pub const FRIEND_ID: int_attribute_t = 15;
pub const FRIEND_USER_ID: int_attribute_t = 16;
pub const FRIEND_ONLINE: int_attribute_t = 17;
pub const MY_USER_ID: int_attribute_t = 18;
pub const PROXY_TYPE: int_attribute_t = 19;
pub const PROXY_PORT: int_attribute_t = 20;
pub const CELL_X: int_attribute_t = 21;
pub const CELL_Z: int_attribute_t = 22;
pub const TERRAIN_TILE_X: int_attribute_t = 23;
pub const TERRAIN_TILE_Z: int_attribute_t = 24;
pub const TERRAIN_NODE_X: int_attribute_t = 25;
pub const TERRAIN_NODE_Z: int_attribute_t = 26;
pub const TERRAIN_NODE_REVISION: int_attribute_t = 27;
pub const CLICKED_SESSION: int_attribute_t = 28;
pub const CHAT_TYPE: int_attribute_t = 29;
pub const CHAT_COLOR_RED: int_attribute_t = 30;
pub const CHAT_COLOR_GREEN: int_attribute_t = 31;
pub const CHAT_COLOR_BLUE: int_attribute_t = 32;
pub const CHAT_EFFECTS: int_attribute_t = 33;
pub const DISCONNECT_ERROR_CODE: int_attribute_t = 34;
pub const URL_TARGET: int_attribute_t = 35;
pub const CURRENT_EVENT: int_attribute_t = 36;
pub const CURRENT_CALLBACK: int_attribute_t = 37;
pub const CELL_REVISION: int_attribute_t = 38;
pub const CELL_STATUS: int_attribute_t = 39;
pub const JOIN_ID: int_attribute_t = 40;
pub const HIGHEST_INT: int_attribute_t = 41;
pub type float_attribute_t = i32;
pub const AVATAR_X: float_attribute_t = 0;
pub const AVATAR_Y: float_attribute_t = 1;
pub const AVATAR_Z: float_attribute_t = 2;
pub const AVATAR_YAW: float_attribute_t = 3;
pub const AVATAR_PITCH: float_attribute_t = 4;
pub const MY_X: float_attribute_t = 5;
pub const MY_Y: float_attribute_t = 6;
pub const MY_Z: float_attribute_t = 7;
pub const MY_YAW: float_attribute_t = 8;
pub const MY_PITCH: float_attribute_t = 9;
pub const OBJECT_X: float_attribute_t = 10;
pub const OBJECT_Y: float_attribute_t = 11;
pub const OBJECT_Z: float_attribute_t = 12;
pub const OBJECT_ROTATION_X: float_attribute_t = 13;
pub const OBJECT_ROTATION_Y: float_attribute_t = 14;
pub const OBJECT_ROTATION_Z: float_attribute_t = 15;
pub const OBJECT_YAW: float_attribute_t = 13;
pub const OBJECT_PITCH: float_attribute_t = 14;
pub const OBJECT_ROLL: float_attribute_t = 15;
pub const OBJECT_ROTATION_ANGLE: float_attribute_t = 16;
pub const TELEPORT_X: float_attribute_t = 17;
pub const TELEPORT_Y: float_attribute_t = 18;
pub const TELEPORT_Z: float_attribute_t = 19;
pub const TELEPORT_YAW: float_attribute_t = 20;
pub const TELEPORT_PITCH: float_attribute_t = 21;
pub const CLICK_HIT_X: float_attribute_t = 22;
pub const CLICK_HIT_Y: float_attribute_t = 23;
pub const CLICK_HIT_Z: float_attribute_t = 24;
pub const JOIN_X: float_attribute_t = 25;
pub const JOIN_Y: float_attribute_t = 26;
pub const JOIN_Z: float_attribute_t = 27;
pub const JOIN_YAW: float_attribute_t = 28;
pub const JOIN_PITCH: float_attribute_t = 29;
pub const HIGHEST_FLOAT: float_attribute_t = 30;
pub type string_attribute_t = i32;
pub const AVATAR_NAME: string_attribute_t = 0;
pub const CHAT_MESSAGE: string_attribute_t = 1;
pub const OBJECT_MODEL: string_attribute_t = 2;
pub const OBJECT_ACTION: string_attribute_t = 3;
pub const OBJECT_DESCRIPTION: string_attribute_t = 4;
pub const WORLD_NAME: string_attribute_t = 5;
pub const USER_NAME: string_attribute_t = 6;
pub const USER_EMAIL: string_attribute_t = 7;
pub const WORLD_SETTING_KEY: string_attribute_t = 8;
pub const WORLD_SETTING_VALUE: string_attribute_t = 9;
pub const FRIEND_NAME: string_attribute_t = 10;
pub const PROXY_HOST: string_attribute_t = 11;
pub const TELEPORT_WORLD: string_attribute_t = 12;
pub const URL: string_attribute_t = 13;
pub const JOIN_WORLD: string_attribute_t = 14;
pub const JOIN_NAME: string_attribute_t = 15;
pub const START_WORLD: string_attribute_t = 16;
pub const HIGHEST_STRING: string_attribute_t = 17;
pub type data_attribute_t = i32;
pub const OBJECT_DATA: data_attribute_t = 0;
pub const TERRAIN_NODE_DATA: data_attribute_t = 1;
pub const HIGHEST_DATA: data_attribute_t = 2;
pub type proxy_type_t = i32;
pub const PROXY_TYPE_NONE: proxy_type_t = 0;
pub const PROXY_TYPE_SOCKS4A: proxy_type_t = 1;
pub type url_target_t = i32;
pub const URL_TARGET_BROWSER: url_target_t = 0;
pub const URL_TARGET_OVERLAY: url_target_t = 1;
pub type cell_status_t = i32;
pub const CELL_STATUS_MODIFIED: cell_status_t = 0;
pub const CELL_STATUS_NOT_MODIFIED: cell_status_t = 1;
pub const CELL_STATUS_ERROR: cell_status_t = 2;
pub type instance_t = *mut ::std::os::raw::c_void;
pub type VPInstance = instance_t;
pub type VPEventHandler =
    ::std::option::Option<extern "C" fn(arg1: VPInstance)>;
pub type VPCallbackHandler =
    ::std::option::Option<extern "C" fn(arg1: VPInstance,
                                        arg2: ::std::os::raw::c_int,
                                        arg3: ::std::os::raw::c_int)>;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct terrain_cell_t {
    pub height: f32,
    pub attributes: ::std::os::raw::c_ushort,
    _bindgen_padding_0_: [u8; 2usize],
}
impl ::std::default::Default for terrain_cell_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type chat_type = i32;
pub const CHAT_NORMAL: chat_type = 0;
pub const CHAT_CONSOLE_MESSAGE: chat_type = 1;
pub const CHAT_PRIVATE: chat_type = 2;
pub type text_effect = i32;
pub const TEXT_EFFECT_BOLD: text_effect = 1;
pub const TEXT_EFFECT_ITALIC: text_effect = 2;
#[link(name="VPSDK")]
extern "C" {
    #[link_name = "vp_init"]
    pub fn init(version: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    #[link_name = "vp_create"]
    pub fn create() -> VPInstance;
    #[link_name = "vp_destroy"]
    pub fn destroy(instance: VPInstance) -> ::std::os::raw::c_int;
    #[link_name = "vp_connect_universe"]
    pub fn connect_universe(instance: VPInstance,
                            host: *const ::std::os::raw::c_char,
                            port: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    #[link_name = "vp_login"]
    pub fn login(instance: VPInstance,
                 username: *const ::std::os::raw::c_char,
                 password: *const ::std::os::raw::c_char,
                 botname: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    #[link_name = "vp_wait"]
    pub fn wait(instance: VPInstance, milliseconds: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    #[link_name = "vp_enter"]
    pub fn enter(instance: VPInstance,
                 worldname: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    #[link_name = "vp_leave"]
    pub fn leave(instance: VPInstance) -> ::std::os::raw::c_int;
    #[link_name = "vp_say"]
    pub fn say(instance: VPInstance, message: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    #[link_name = "vp_console_message"]
    pub fn console_message(instance: VPInstance,
                           session: ::std::os::raw::c_int,
                           name: *const ::std::os::raw::c_char,
                           message: *const ::std::os::raw::c_char,
                           effects: ::std::os::raw::c_int,
                           red: ::std::os::raw::c_uchar,
                           green: ::std::os::raw::c_uchar,
                           blue: ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
    #[link_name = "vp_event_set"]
    pub fn event_set(instance: VPInstance, eventname: event_t,
                     event: VPEventHandler) -> ::std::os::raw::c_int;
    #[link_name = "vp_callback_set"]
    pub fn callback_set(instance: VPInstance, callbackname: callback_t,
                        callback: VPCallbackHandler) -> ::std::os::raw::c_int;
    #[link_name = "vp_user_data"]
    pub fn user_data(instance: VPInstance) -> *mut ::std::os::raw::c_void;
    #[link_name = "vp_user_data_set"]
    pub fn user_data_set(instance: VPInstance,
                         data: *mut ::std::os::raw::c_void);
    #[link_name = "vp_state_change"]
    pub fn state_change(instance: VPInstance) -> ::std::os::raw::c_int;
    #[link_name = "vp_int"]
    pub fn int(instance: VPInstance, attr: int_attribute_t)
     -> ::std::os::raw::c_int;
    #[link_name = "vp_float"]
    pub fn float(instance: VPInstance, attr: float_attribute_t) -> f32;
    #[link_name = "vp_double"]
    pub fn double(instance: instance_t, attr: float_attribute_t) -> f64;
    #[link_name = "vp_string"]
    pub fn string(instance: VPInstance, attr: string_attribute_t)
     -> *const ::std::os::raw::c_char;
    #[link_name = "vp_data"]
    pub fn data(instance: VPInstance, attr: data_attribute_t,
                length: *mut ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
    #[link_name = "vp_int_get"]
    pub fn int_get(instance: VPInstance, attr: int_attribute_t,
                   value: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    #[link_name = "vp_float_get"]
    pub fn float_get(instance: VPInstance, attr: float_attribute_t,
                     value: *mut f32) -> ::std::os::raw::c_int;
    #[link_name = "vp_double_get"]
    pub fn double_get(instance: VPInstance, attr: float_attribute_t,
                      value: *mut f64) -> ::std::os::raw::c_int;
    #[link_name = "vp_string_get"]
    pub fn string_get(instance: VPInstance, attr: string_attribute_t,
                      value: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    #[link_name = "vp_int_set"]
    pub fn int_set(instance: VPInstance, name: int_attribute_t,
                   value: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    #[link_name = "vp_float_set"]
    pub fn float_set(instance: instance_t, name: float_attribute_t,
                     value: f32) -> ::std::os::raw::c_int;
    #[link_name = "vp_double_set"]
    pub fn double_set(instance: instance_t, attr: float_attribute_t,
                      value: f64) -> ::std::os::raw::c_int;
    #[link_name = "vp_string_set"]
    pub fn string_set(instance: VPInstance, name: string_attribute_t,
                      str: *const ::std::os::raw::c_char);
    #[link_name = "vp_data_set"]
    pub fn data_set(instance: VPInstance, name: data_attribute_t,
                    length: ::std::os::raw::c_int,
                    data: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    #[link_name = "vp_query_cell"]
    pub fn query_cell(instance: VPInstance, x: ::std::os::raw::c_int,
                      z: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    #[link_name = "vp_query_cell_revision"]
    pub fn query_cell_revision(instance: instance_t, x: ::std::os::raw::c_int,
                               z: ::std::os::raw::c_int,
                               revision: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    #[link_name = "vp_object_add"]
    pub fn object_add(instance: VPInstance) -> ::std::os::raw::c_int;
    #[link_name = "vp_object_load"]
    pub fn object_load(instance: VPInstance) -> ::std::os::raw::c_int;
    #[link_name = "vp_object_bump_begin"]
    pub fn object_bump_begin(instance: instance_t,
                             object_id: ::std::os::raw::c_int,
                             session_to: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    #[link_name = "vp_object_bump_end"]
    pub fn object_bump_end(instance: instance_t,
                           object_id: ::std::os::raw::c_int,
                           session_to: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    #[link_name = "vp_object_change"]
    pub fn object_change(instance: VPInstance) -> ::std::os::raw::c_int;
    #[link_name = "vp_object_click"]
    pub fn object_click(instance: VPInstance,
                        object_id: ::std::os::raw::c_int,
                        session_to: ::std::os::raw::c_int, hit_x: f32,
                        hit_y: f32, hit_z: f32) -> ::std::os::raw::c_int;
    #[link_name = "vp_object_delete"]
    pub fn object_delete(instance: VPInstance,
                         object_id: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    #[link_name = "vp_object_get"]
    pub fn object_get(instance: VPInstance, object_id: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    #[link_name = "vp_world_list"]
    pub fn world_list(instance: VPInstance, time: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    #[link_name = "vp_user_attributes_by_id"]
    pub fn user_attributes_by_id(instance: VPInstance,
                                 user_id: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    #[link_name = "vp_user_attributes_by_name"]
    pub fn user_attributes_by_name(instance: VPInstance,
                                   name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    #[link_name = "vp_friends_get"]
    pub fn friends_get(instance: VPInstance) -> ::std::os::raw::c_int;
    #[link_name = "vp_friend_add_by_name"]
    pub fn friend_add_by_name(instance: VPInstance,
                              name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    #[link_name = "vp_friend_delete"]
    pub fn friend_delete(instance: VPInstance,
                         friend_user_id: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    #[link_name = "vp_terrain_query"]
    pub fn terrain_query(instance: VPInstance, tile_x: ::std::os::raw::c_int,
                         tile_z: ::std::os::raw::c_int,
                         revision: *mut [::std::os::raw::c_int; 4usize])
     -> ::std::os::raw::c_int;
    #[link_name = "vp_terrain_node_set"]
    pub fn terrain_node_set(instance: VPInstance,
                            tile_x: ::std::os::raw::c_int,
                            tile_z: ::std::os::raw::c_int,
                            node_x: ::std::os::raw::c_int,
                            node_z: ::std::os::raw::c_int,
                            cells: *mut terrain_cell_t)
     -> ::std::os::raw::c_int;
    #[link_name = "vp_avatar_click"]
    pub fn avatar_click(instance: VPInstance,
                        avatar_session: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    #[link_name = "vp_teleport_avatar"]
    pub fn teleport_avatar(instance: VPInstance,
                           target_session: ::std::os::raw::c_int,
                           world: *const ::std::os::raw::c_char, x: f32,
                           y: f32, z: f32, yaw: f32, pitch: f32)
     -> ::std::os::raw::c_int;
    #[link_name = "vp_url_send"]
    pub fn url_send(instance: VPInstance, session_id: ::std::os::raw::c_int,
                    url: *const ::std::os::raw::c_char,
                    url_target: url_target_t) -> ::std::os::raw::c_int;
    #[link_name = "vp_join"]
    pub fn join(instance: instance_t, user_id: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    #[link_name = "vp_join_accept"]
    pub fn join_accept(instance: instance_t, requestId: ::std::os::raw::c_int,
                       world: *const ::std::os::raw::c_char, x: f64, y: f64,
                       z: f64, yaw: f32, pitch: f32) -> ::std::os::raw::c_int;
    #[link_name = "vp_join_decline"]
    pub fn join_decline(instance: instance_t,
                        requestId: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    #[link_name = "vp_world_permission_user_set"]
    pub fn world_permission_user_set(instance: instance_t,
                                     permission:
                                         *const ::std::os::raw::c_char,
                                     user_id: ::std::os::raw::c_int,
                                     enable: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    #[link_name = "vp_world_permission_session_set"]
    pub fn world_permission_session_set(instance: instance_t,
                                        permission:
                                            *const ::std::os::raw::c_char,
                                        session_id: ::std::os::raw::c_int,
                                        enable: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    #[link_name = "vp_world_setting_set"]
    pub fn world_setting_set(instance: instance_t,
                             setting: *const ::std::os::raw::c_char,
                             value: *const ::std::os::raw::c_char,
                             session_to: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
